<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<manifest>
    <application name="CSK_Module_MultiImageFilter">
        <crown name="CSK_Module_MultiImageFilter">
            <desc>This is an automatically generated CROWN (description not necessary).</desc>
        </crown>
        <crown name="CSK_MultiImageFilter">
            <trait>released</trait>
            <desc>Module to provide image filter processing functionality. Multiple instances can be created and will run in multiple threads on the device. +
This module provides a UI for all relevant features. +
{empty} +
Typically to configure this module to work with other modules you should do this: +
{empty} +
1) If multiple instances are needed, these can be added via 'addInstance()' (not needed if you only use 1 single instace). +
2) Select the instance you want to configur via setInstance(). +
3) Set the image filter type via 'setFilterType' and optionally set according filter values if necessary. + 
4) Set the event providing the images to be processed e.g. via setRegisterEvent('CSK_ImagePlayer.OnNewImage'). +
5) Other modules can register on the 'CSK_MultiImageFilter.OnNewImage[NUM]' event to receive the filtred image for further processing. +
{empty} +
INFO: It is possible to combine multiple filters / instances by adding instances and to register to the related preprocessed image like described in step 5). +</desc>
            <enum name="ImageFilter" trait="released">
                <desc>Available image filter.</desc>
                <item desc="Convert RGB image to gray image." name="Gray">Gray</item>
                <item desc="Canny filter." name="Canny">Canny</item>
                <item desc="Blur filter." name="Blur">Blur</item>
                <item desc="Crop image." name="Crop">Crop</item>
                <item desc="Transform image." name="Transform">Transform</item>
            </enum>
            <serves>
                <event name="OnNewStatusLoadParameterOnReboot">
                    <desc>Notify status if parameters should be loaded on app/device boot up.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnPersistentDataModuleAvailable">
                    <desc>Notify status if features of CSK_PersistentData module are available.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnNewInstanceList">
                    <desc>Event to provide list of created instances.</desc>
                    <param desc="List of created instances." multiplicity="1" name="list" type="string"/>
                </event>
                <event name="OnNewProcessingParameter">
                    <desc>Event to share processing parameters to the instances.</desc>
                    <param desc="Number of the instance to receive the parameter." multiplicity="1" name="objectNo" type="int"/>
                    <param desc="Name of the parameter." multiplicity="1" name="parameter" type="string"/>
                    <param desc="Value of the parameter." multiplicity="1" name="value" type="auto"/>
                    <param desc="If parameter is for specifici internal used object, its number." multiplicity="?" name="internalObjectNo" type="int"/>
                </event>
                <event name="OnNewSelectedInstance">
                    <desc>Notify if new instance is selected.</desc>
                    <param desc="Selected instance." multiplicity="1" name="selectedObject" type="int"/>
                </event>
                <event name="OnDataLoadedOnReboot">
                    <desc>Event to call if module tried to load parameters and should be ready.</desc>
                </event>
                <event name="OnNewImageNUM">
                    <desc>Example of dynamically created event to provide result image of instance. +
NUM will be replaced by the number of instance (e.g. "OnNewImage1"). +
INFO: Other modules can check via "Script.isServedAsEvent" if event of sepecific instance exists.</desc>
                    <param alias="Image" desc="Result image." multiplicity="?" name="resultImage" type="object"/>
                </event>
                <event name="OnNewParameterName">
                    <desc>Notify name of persistent data parameter.</desc>
                    <param desc="Parameter name" multiplicity="1" name="name" type="string"/>
                </event>
                <event name="OnUserLevelOperatorActive">
                    <desc>Status of Operator userlevel. Used internally in combination with the CSK_UserManagement module if available.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnUserLevelMaintenanceActive">
                    <desc>Status of Maintenance userlevel. Used internally in combination with the CSK_UserManagement module if available.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnUserLevelServiceActive">
                    <desc>Status of Service userlevel. Used internally in combination with the CSK_UserManagement module if available.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnUserLevelAdminActive">
                    <desc>Status of Admin userlevel. Used internally in combination with the CSK_UserManagement module if available.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnNewValueUpdateNUM">
                    <desc>Example of dynamically created event to sync paramters between instance threads and Controller part of module. +
NUM will be replaced by the number of instance (e.g. "OnNewResult1"). +</desc>
                    <param desc="Instance new value is coming from." multiplicity="1" name="instance" type="int"/>
                    <param desc="Name of the paramter to update/sync." multiplicity="1" name="parameter" type="string"/>
                    <param desc="Value to update." multiplicity="1" name="value" type="auto"/>
                    <param desc="Optionally if internal parameter should be used for internal objects." multiplicity="?" name="selectedObject" type="int"/>
                </event>
                <event name="OnNewValueToForwardNUM">
                    <desc>Example of dynamically created event to forward data from instance thread to Controller part of module, e.g. to forward values to UI. +
NUM will be replaced by the number of instance (e.g. "OnNewResult1"). +</desc>
                    <param desc="Eventname to use to forward value." multiplicity="1" name="eventname" type="string"/>
                    <param desc="Value to forward." multiplicity="1" name="value" type="auto"/>
                </event>
                <event name="OnNewResult">
                    <desc>Generic event to notify results. E.g. to forward results from single instances.</desc>
                    <param desc="Result" multiplicity="1" name="result" type="bool"/>
                </event>
                <event name="OnNewStatusImageFilterType">
                    <desc>Notify selected image filter type.</desc>
                    <param desc="Filter type." multiplicity="1" name="filterType" type="string"/>
                </event>
                <event name="OnNewViewerID">
                    <desc>Notify currently used viewerID (e.g. to show correct viewer in UI).</desc>
                    <param desc="viewerID" multiplicity="1" name="viewerID" type="string"/>
                </event>
                <event name="OnNewStatusRegisteredEvent">
                    <desc>Notify event instance is registered to receive new image to process.</desc>
                    <param desc="Name of event." multiplicity="1" name="eventname" type="string"/>
                </event>
                <event name="OnNewStatusShowImage">
                    <desc>Notify if image should be showed in UI.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnNewStatusBlurKernelSizePix">
                    <desc>Notify kernel size of blur filter.</desc>
                    <param desc="Size of the kernel." multiplicity="1" name="size" type="int"/>
                </event>
                <event name="OnNewStatusCannyThresholds">
                    <desc>Notify threshold values of canny filter.</desc>
                    <param desc="Threshold values." multiplicity="+" name="threshold" type="float"/>
                </event>
                <event name="OnNewStatusCropPosX">
                    <desc>Notify x position to crop image.</desc>
                    <param desc="The x position of the top-left corner of the cropped image in the source image." multiplicity="1" name="posX" type="int"/>
                </event>
                <event name="OnNewStatusCropPosY">
                    <desc>Notify y position to crop image.</desc>
                    <param desc="The y position of the top-left corner of the cropped image in the source image." multiplicity="1" name="poxY" type="int"/>
                </event>
                <event name="OnNewStatusCropWidth">
                    <desc>Notify width of cropped image.</desc>
                    <param desc="The width of the cropped image." multiplicity="1" name="width" type="int"/>
                </event>
                <event name="OnNewStatusCropHeight">
                    <desc>Notify height of cropped image.</desc>
                    <param desc="The height of the cropped image." multiplicity="1" name="height" type="int"/>
                </event>
                <event name="OnNewStatusRegisteredTransformationEvent">
                    <desc>Notify event to receive transformation data to align image.</desc>
                    <param desc="Name of event." multiplicity="1" name="eventName" type="string"/>
                </event>
                <event name="OnNewStatusTransformationSource">
                    <desc>Notify source for transformation data.</desc>
                    <param desc="Mode" multiplicity="1" name="mode" type="string"/>
                </event>
                <event name="OnNewStatusTransformationX">
                    <desc>Notify manual transformation in x direction.</desc>
                    <param desc="Transformation in x direction." multiplicity="1" name="xTrans" type="int"/>
                </event>
                <event name="OnNewStatusTransformationY">
                    <desc>Notify manual transformation in y direction.</desc>
                    <param desc="Transformation in y direction." multiplicity="1" name="yTrans" type="int"/>
                </event>
                <event name="OnNewStatusTransformationAngle">
                    <desc>Notify manual transformation angle.</desc>
                    <param desc="Transformation angle." multiplicity="1" name="angle" type="int"/>
                </event>
                <event name="OnNewStatusTransformationAngleOriginX">
                    <desc>Notify transformation angle origin x position.</desc>
                    <param desc="x position" multiplicity="1" name="xPos" type="int"/>
                </event>
                <event name="OnNewStatusTransformationAngleOriginY">
                    <desc>Notify transformation angle origin y position.</desc>
                    <param desc="y position" multiplicity="1" name="yPos" type="int"/>
                </event>
                <function name="setParameterName">
                    <desc>Function to set the name of the parameters if saved/loaded via the CSK_PersistentData module.</desc>
                    <param desc="Name of the parameter" multiplicity="1" name="name" type="string"/>
                </function>
                <function name="sendParameters">
                    <desc>Send parameters to CSK_PersistentData module if possible to save them.</desc>
                </function>
                <function name="loadParameters">
                    <desc>Load parameters for this module from the CSK_PersistentData module if possible and use them.</desc>
                </function>
                <function name="setLoadOnReboot">
                    <desc>Configure if this module should load its saved parameters at app/ device boot up.</desc>
                    <param desc="Set status" multiplicity="1" name="status" type="bool"/>
                </function>
                <function name="pageCalled">
                    <desc>Function to register "OnResume" of the module UI (only as helper function).</desc>
                    <return desc="Empty string (only needed to simplify binding)." multiplicity="1" name="empty" type="string"/>
                </function>
                <function name="setSelectedInstance">
                    <desc>Select one of the multiple instances.</desc>
                    <param desc="Instance to select." multiplicity="1" name="instance" type="int"/>
                </function>
                <function name="getInstancesAmount">
                    <desc>Get the amount of created instances of this module.</desc>
                    <return desc="Amount of created instances." multiplicity="1" name="amount" type="int"/>
                </function>
                <function name="setRegisterEvent">
                    <desc>Configure event that this module should listen to. If this one is notified, it will be linked to internal processing function. +
(Will be set to currently active instance, see "setSelectedObject")</desc>
                    <param desc="(external) Event name to listen to." multiplicity="1" name="event" type="string"/>
                </function>
                <function name="processInstanceNUM">
                    <desc>Example of dynamically served function to process internally coded function. +
NUM will be replaced by the number of instance (e.g. "processInstance1"). +
INFO: Other modules can check via "Script.isServedAsFunction" if function of sepecific instance exists. +
Needs then to be called via "Script.callFunction".</desc>
                    <param alias="Alias" desc="Transferred object (optional)" multiplicity="?" name="object" type="object"/>
                    <param alias="Container" desc="Optional transformation data (xTrans, yTrans)" multiplicity="?" name="translation" type="object"/>
                    <return desc="Processing result (optional)." multiplicity="?" name="result" type="bool"/>
                </function>
                <function name="addInstance">
                    <desc>Function to add an additional instance.</desc>
                </function>
                <function name="resetInstances">
                    <desc>Function to reset instances to one single instance. +
IMPORTANT: As instances start their own threads, the module needs to be restarted if new instances are needed... (see AppEngine docu for "Script.startScript").</desc>
                </function>
                <function name="setFilterType">
                    <desc>Function to set filter type.</desc>
                    <param desc="Filter type." multiplicity="1" name="filterType" type="enum"/>
                </function>
                <function name="setShowImage">
                    <desc>Function to select if image should be shown on UI.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </function>
                <function name="setBlurKernelSizePix">
                    <desc>Function to set kernel size of blur filter.</desc>
                    <param desc="Size of the kernel. Must be positive." multiplicity="1" name="kernelSize" type="int"/>
                </function>
                <function name="setCannyThreshold">
                    <desc>Function to set threshold range of canny filter.</desc>
                    <param desc="Threshold" multiplicity="+" name="range" type="float"/>
                </function>
                <function name="setCropPosX">
                    <desc>Function to set x position to crop image.</desc>
                    <param desc="The x position of the top-left corner of the cropped image in the source image." multiplicity="1" name="posX" type="int"/>
                </function>
                <function name="setCropPosY">
                    <desc>Function to set y position to crop image.</desc>
                    <param desc="The y position of the top-left corner of the cropped image in the source image." multiplicity="1" name="posY" type="int"/>
                </function>
                <function name="setCropWidth">
                    <desc>Function to set widht of cropped image.</desc>
                    <param desc="The width of the cropped image." multiplicity="1" name="width" type="int"/>
                </function>
                <function name="setCropHeight">
                    <desc>Function to set height of cropped image.</desc>
                    <param desc="The height of the cropped image." multiplicity="1" name="height" type="int"/>
                </function>
                <function name="setRegisterTransformationEvent">
                    <desc>Function to set event to receive transformation data to align image.</desc>
                    <param desc="Event (needs to provide translation data as 'Transform' object)." multiplicity="1" name="event" type="string"/>
                </function>
                <function name="setTransformationSource">
                    <desc>Function to set source of transformation data.</desc>
                    <param desc="Source" multiplicity="1" name="source" type="string"/>
                </function>
                <function name="setTransformationX">
                    <desc>Functin to set manual transformation in x direction.</desc>
                    <param desc="Translation in x direction." multiplicity="1" name="x" type="int"/>
                </function>
                <function name="setTransformationY">
                    <desc>Functin to set manual transformation in y direction.</desc>
                    <param desc="Translation in y direction." multiplicity="1" name="y" type="int"/>
                </function>
                <function name="setTransformationAngle">
                    <desc>Functin to set manual transformation angle.</desc>
                    <param desc="Transformation angle in degree between -180 and +180." multiplicity="1" name="angle" type="int"/>
                </function>
                <function name="setTransformationAngleOriginX">
                    <desc>Function to set xPos of origin for manual angle transformation.</desc>
                    <param desc="x position" multiplicity="1" name="xPos" type="int"/>
                </function>
                <function name="setTransformationAngleOriginY">
                    <desc>Function to set yPos of origin for manual angle transformation.</desc>
                    <param desc="y position" multiplicity="1" name="yPos" type="int"/>
                </function>
            </serves>
        </crown>
        <meta key="author">SICK AG</meta>
        <meta key="version">0.1.0</meta>
        <meta key="priority">low</meta>
        <meta key="copy-protected">false</meta>
        <meta key="read-protected">false</meta>
        <meta key="crown2-flow-engine">false</meta>
        <meta key="LuaLoadAllEngineAPI">false</meta>
        <entry default="CSK_Module_MultiImageFilter.lua" path="scripts"/>
    </application>
</manifest>
